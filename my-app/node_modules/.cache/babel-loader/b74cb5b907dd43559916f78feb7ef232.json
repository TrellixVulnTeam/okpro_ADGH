{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from \"react\";\nexport default function useClickOutSide() {\n  _s();\n\n  const [show, setShow] = useState(false);\n  const nodeRef = useRef(null);\n  useEffect(() => {\n    const handleClickOutSide = e => {\n      if (nodeRef.current && !nodeRef.current.contains(e.target)) {\n        console.log(\"click outside dropdown\");\n        setShow(false);\n      } else {\n        console.log(\"click inside dropdown\");\n      }\n    };\n\n    document.addEventListener(\"click\", handleClickOutSide);\n    return () => {\n      document.removeEventListener(\"click\", handleClickOutSide);\n    };\n  }, []);\n  return {\n    show,\n    setShow,\n    nodeRef\n  };\n}\n\n_s(useClickOutSide, \"WrWmwxYvZ1uwP+HuVLDLwzfuKO4=\");","map":{"version":3,"sources":["E:/Khoahoc-Reactjs-KTCITY/REACT/my-app/src/hooks/useClickOutSide.js"],"names":["React","useEffect","useRef","useState","useClickOutSide","show","setShow","nodeRef","handleClickOutSide","e","current","contains","target","console","log","document","addEventListener","removeEventListener"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,eAAe,SAASC,eAAT,GAA2B;AAAA;;AACxC,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBH,QAAQ,CAAC,KAAD,CAAhC;AACA,QAAMI,OAAO,GAAGL,MAAM,CAAC,IAAD,CAAtB;AACAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMO,kBAAkB,GAAIC,CAAD,IAAO;AAChC,UAAIF,OAAO,CAACG,OAAR,IAAmB,CAACH,OAAO,CAACG,OAAR,CAAgBC,QAAhB,CAAyBF,CAAC,CAACG,MAA3B,CAAxB,EAA4D;AAC1DC,QAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACAR,QAAAA,OAAO,CAAC,KAAD,CAAP;AACD,OAHD,MAGO;AACLO,QAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACD;AACF,KAPD;;AAQAC,IAAAA,QAAQ,CAACC,gBAAT,CAA0B,OAA1B,EAAmCR,kBAAnC;AACA,WAAO,MAAM;AACXO,MAAAA,QAAQ,CAACE,mBAAT,CAA6B,OAA7B,EAAsCT,kBAAtC;AACD,KAFD;AAGD,GAbQ,EAaN,EAbM,CAAT;AAcA,SAAO;AACLH,IAAAA,IADK;AAELC,IAAAA,OAFK;AAGLC,IAAAA;AAHK,GAAP;AAKD;;GAtBuBH,e","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nexport default function useClickOutSide() {\r\n  const [show, setShow] = useState(false);\r\n  const nodeRef = useRef(null);\r\n  useEffect(() => {\r\n    const handleClickOutSide = (e) => {\r\n      if (nodeRef.current && !nodeRef.current.contains(e.target)) {\r\n        console.log(\"click outside dropdown\");\r\n        setShow(false);\r\n      } else {\r\n        console.log(\"click inside dropdown\");\r\n      }\r\n    };\r\n    document.addEventListener(\"click\", handleClickOutSide);\r\n    return () => {\r\n      document.removeEventListener(\"click\", handleClickOutSide);\r\n    };\r\n  }, []);\r\n  return {\r\n    show,\r\n    setShow,\r\n    nodeRef,\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}